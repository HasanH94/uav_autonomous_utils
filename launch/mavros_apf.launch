<?xml version="1.0"?>
<launch>
    <!-- MAVROS posix SITL environment launch script -->
    <!-- launches MAVROS, PX4 SITL, Gazebo environment, and spawns vehicle -->
    <!-- vehicle pose -->
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0.2"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>
    <!-- vehicle model and world -->
    <arg name="est" default="ekf2"/>
    <arg name="vehicle" default="iris"/>
    <arg name="world" default="/home/hasan/research_ws/src/uav_autonomous_utils/src/empty_2.world"/>
    <arg name="sdf" default="/home/hasan/research_ws/src/uav_autonomous_utils/src/iris_depth_camera/iris_depth_camera.sdf"/>
    <!-- gazebo configs -->
    <arg name="gui" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="respawn_gazebo" default="false"/>
    <!-- MAVROS configs -->
    <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
    <arg name="respawn_mavros" default="false"/>
    <!-- PX4 configs -->
    <arg name="interactive" default="true"/>
    <!-- PX4 SITL and Gazebo -->

    <include file="$(find px4)/launch/posix_sitl.launch">
        <arg name="x" value="$(arg x)"/>
        <arg name="y" value="$(arg y)"/>
        <arg name="z" value="$(arg z)"/>
        <arg name="R" value="$(arg R)"/>
        <arg name="P" value="$(arg P)"/>
        <arg name="Y" value="$(arg Y)"/>
        <arg name="world" value="$(arg world)"/>
        <arg name="vehicle" value="$(arg vehicle)"/>
        <arg name="sdf" value="$(arg sdf)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="interactive" value="$(arg interactive)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
    </include>

    <!-- MAVROS -->
    <!-- <include file="$(find mavros)/launch/px4.launch">
        <arg name="gcs_url" value=""/>
        <arg name="fcu_url" value="$(arg fcu_url)"/>
        <arg name="respawn_mavros" value="$(arg respawn_mavros)"/>
        <arg name="fcu_protocol" value="v2.0" />
    </include> -->
    
	<arg name="gcs_url" default="" />
	<arg name="tgt_system" default="1" />
	<arg name="tgt_component" default="1" />
	<arg name="log_output" default="screen" />
	<arg name="fcu_protocol" default="v2.0" />

	<include file="$(find mavros)/launch/node.launch">
		<arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
		<arg name="config_yaml" value="$(find uav_autonomous_utils)/config/px4_config.yaml" />

		<arg name="fcu_url" value="$(arg fcu_url)" />
		<arg name="gcs_url" value="$(arg gcs_url)" />
		<arg name="tgt_system" value="$(arg tgt_system)" />
		<arg name="tgt_component" value="$(arg tgt_component)" />
		<arg name="log_output" value="$(arg log_output)" />
		<arg name="fcu_protocol" value="$(arg fcu_protocol)" />
		<arg name="respawn_mavros" default="$(arg respawn_mavros)" />
	</include>

    <node pkg="tf" type="static_transform_publisher" name="base_link_to_camera_link_node" args="0.1 0 0.0 -1.57 0 -1.57 base_link iris/camera_link 33"/>


    <node pkg="opendrone" type="tf_to_pose.py" name="camera_pose_publisher" output="screen">
        <param name="parent_frame" value="odom"/>
        <param name="child_frame" value="iris/camera_link"/>
        <param name="topic" value="/camera/pose"/>
    </node>

     <arg name="qmdp" default="false" doc="rep_vel_out is used in qmdp mode, force_out is used in apf mode"/>
        <node name="filter_point" pkg="apf_pf" type="filter_point_node" output="screen" clear_params="true" launch-prefix="bash -c 'sleep 12.0; $0 $@' ">
            <remap from="~/pt_cloud_in" to="/iris/camera/depth/points"/>
            <remap from="~/cam_info_in" to="/iris/camera/depth/camera_info"/>
            <remap from="~/viz_out" to="/filter_point/viz_out"/>
            <remap from="~/pt_out" to="/filter_point/closest_point_filtered"/>
            <!-- <remap from="~/pt_piv_out" to="filter_point/closest_point_raw"/> -->
            <remap from="~/force_out" to="filter_point/force_out"/>
            <!-- <remap from="~/twist_out" to="filter_point/rep_vel_out"/> -->
            <rosparam command="load" file="$(find uav_autonomous_utils)/config/apf_acc.yaml" subst_value="true"/>
            <param name="base_frame_id" type="string" value="base_link"/>
        </node>

    <node name="filter_point_control" pkg="apf_pf" type="goal_to_vel_node" output="screen" clear_params="true">
        <rosparam command="load" file="$(find uav_autonomous_utils)/config/apfc_acc.yaml" subst_value="true"/>
        <param name="pose_frame_id" value="odom"/>
        <param name="base_frame_id" value="base_link"/>
        <remap from="~/pose_in" to="/mavros/local_position/pose"/>
        <remap from="~/goal_pt_in" to="/lookahead_point"/>
        <remap from="~/rep_vec_in" to="/filter_point/force_out"/>
        <remap from="~/twist_out" to="/mavros/setpoint_velocity/cmd_vel"/>
    </node>

    <node pkg="uav_autonomous_utils" type="map_to_odom_publisher.py" name="map_to_odom_publisher" output="screen"/>





















    <!-- <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_sync/rgbd_sync" output="screen">
        <remap from="rgb/image"       to="/iris/camera/rgb/image_raw"/>
        <remap from="depth/image"     to="/iris/camera/depth/image_raw"/>
        <remap from="rgb/camera_info" to="/iris/camera/rgb/camera_info"/>
        <param name="approx_sync" value="true"/>
        <param name="approx_sync_max_interval" value="0.1"/>
    </node> -->

    <!-- <node pkg="rtabmap_odom" type="rgbd_odometry" name="rgbd_odometry" output="screen">
        <param name="Odom/MinInliers" value="5"/>
        <param name="Odom/MaxFeatures" value="500"/>
        <param name="Odom/KeypointDetector" value="ORB"/>
        <param name="Odom/Strategy" value="1"/>
        <remap from="imu" to="/mavros/imu/data"/>
        <remap from="/depth/image" to="/iris/camera/depth/image_raw"/>
        <remap from="/rgb/camera_info" to="/iris/camera/rgb/camera_info"/>
        <remap from="/rgb/image" to="/iris/camera/rgb/image_raw"/>
        <remap from="odom" to="/rtabmap/odom"/>
        <param name="frame_id" value="base_link"/>
        <param name="odom_frame_id" value="odom"/>
        <param name="publish_tf" value="true"/>
    </node> -->

    <!-- <node pkg="rtabmap_slam" type="rtabmap" name="rtabmap" output="screen">
        <param name="frame_id" value="base_link"/>
        <remap from="odom" to="/rtabmap/odom"/>
        <param name="subscribe_rgbd" value="true"/>
        <param name="subscribe_depth" value="false"/>
        <param name="publish_tf" value="true"/>
        <param name="slam_2d" value="false"/>
        <param name="global_optimization" value="false"/>
        <param name="RGBD/OptimizeFromGraphEnd" value="false"/>
        <param name="RGBD/LinearUpdate" value="0.1"/>
        <param name="RGBD/AngularUpdate" value="0.1"/>
        <param name="Mem/IncrementalMemory" value="false"/>
    </node> -->

    <!-- <node pkg="map_to_odom_publisher" type="map_to_odom_publisher" name="map_to_odom_node">
        <remap from="/current_pose" to="/mavros/local_position/odom" />  
        <param name="~odom_frame_id" value="odom"/>
        <param name="~base_frame_id" value="base_link"/>
        <param name="~global_frame_id" value="map"/>
    </node> -->

    <!-- GPS to Odometry conversion -->
    <!-- <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" respawn="true">
        <rosparam command="load" file="$(find uav_autonomous_utils)/config/navsat_transform.yaml" />
        <remap from="/imu/data" to="/mavros/imu/data" />
        <remap from="/gps/fix" to="/mavros/global_position/global" />
        <remap from="/odometry/filtered" to="/mavros/global_position/local" />
        <remap from="/odometry/filtered" to="/mavros/local_position/odom" />
    </node> -->

    <!-- EKF for map -> odom -->
    <!-- <node pkg="robot_localization" type="ekf_localization_node" name="map_to_odom_node">
        <rosparam command="load" file="$(find opendrone)/config/ekf_global.yaml" />
        <param name="world_frame" value="map"/>
    </node>

    <node pkg="robot_localization" type="ekf_localization_node" name="odom_to_base_link_node">
        <rosparam command="load" file="$(find opendrone)/config/ekf_global.yaml" />
        <param name="world_frame" value="odom"/>
    </node> -->


    <!-- APF-PF nodes for obstacle avoidance -->
    <!-- Convert depth image to ordered point cloud for APF-PF -->
    <!-- <node pkg="nodelet" type="nodelet" name="standalone_nodelet" args="manager" output="screen"/>
    <node pkg="nodelet" type="nodelet" name="depth_to_point" args="standalone depth_image_proc/point_cloud_xyz" output="screen">
        <remap from="camera_info" to="/iris/camera/depth/camera_info"/>
        <remap from="image_rect" to="/iris/camera/depth/image_raw"/>
        <remap from="points" to="/iris/camera/depth/points_ordered"/>
    </node> -->


    <!-- <node pkg="simple_message_to_tf" type="message_to_tf" name="odom_to_base_link_node" output="screen">
        <param name="odometry_topic" value="/mavros/local_position/odom" />
        <param name="frame_id" value="odom" />
        <param name="child_frame_id" value="base_link" />
    </node> -->

    <!-- <node pkg="tf" type="static_transform_publisher" name="odom_map_linker" args="0 0 0 0 0 0 map odom 100" /> -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="odom_base_link_linker" args="0 0 0 0 0 0 odom base_link 100" /> -->

    <!-- <node pkg="opendrone" type="altitude_to_pose.py" name="altitude_to_pose_node" output="screen"/> -->

    <!-- Commented out to use GPS-based localization instead of VSLAM -->
    <!-- <include file="$(find uav_autonomous_utils)/src/rtabmap_drone.launch"/> -->


    <!-- Debugger Node -->
    <!-- <node pkg="uav_autonomous_utils" type="debug_controller.py" name="controller_debugger" output="screen"/> -->
    
</launch>
